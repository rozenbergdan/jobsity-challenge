// <auto-generated />
using System;
using Challenge.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Challenge.Infrastructure.Migrations
{
    [DbContext(typeof(ChallengeIdentityDbContext))]
    [Migration("20220404162534_AddUserBot")]
    partial class AddUserBot
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Challenge.Infrastructure.Entities.ChallengeUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "21397611-90c1-4359-94d0-0800eb2a4f5b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "789e1dce-9a23-44bb-8eea-9bac0b7c159c",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "GOKU",
                            PasswordHash = "AQAAAAEAACcQAAAAEAXkg1qfzq5RuHhprF7Jg81haI0uLKjam8Y72XwTtVlbwfwAnJdfxMoEVY8WS6Gj0Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9079f8b4-9a1f-4f0c-8d2a-e7d41f29f2ff",
                            TwoFactorEnabled = false,
                            UserName = "goku"
                        },
                        new
                        {
                            Id = "25caed64-ae6c-4069-bb72-554ad038498e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6c499844-1447-4507-8329-da6e4e1b56fb",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "KRILIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEAm+MPb00Xu2FT0uAqFTYyMdhV83XYL+iD8wE2KIEA9xs+XQIFwPdDowVIbMuiFTxA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "66d7a02a-2e11-4f61-9caa-25d8f19aa8c9",
                            TwoFactorEnabled = false,
                            UserName = "krilin"
                        },
                        new
                        {
                            Id = "c09e1e40-dc1f-45b7-8b52-b65145954d94",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e218c298-2258-41d5-ae0f-15f14c59bcd5",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "VEGETA",
                            PasswordHash = "AQAAAAEAACcQAAAAEIIDBvouj3f+orDVNYwJrx+vDL1J2nD0shV4Ewv1KbDxDPMrazsxaVasx2oxNGAaYw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7627d88b-99e7-4569-8fe2-63a9d30becba",
                            TwoFactorEnabled = false,
                            UserName = "vegeta"
                        },
                        new
                        {
                            Id = "9efc17fe-738a-4b4c-bdb6-002d17605b7c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "28c12f66-0536-4581-979e-5fa2703254c6",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "STOCK_BOT",
                            PasswordHash = "AQAAAAEAACcQAAAAEHMC3pAPaST1DOlRGP1COIxv+0WbGFBKbpYd1141W1vpYbIJOa21Iz4QQlK4yBntPA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "847e0216-afc1-47a6-b1bb-8d8438413172",
                            TwoFactorEnabled = false,
                            UserName = "stock_bot"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2c7a3320-0d7f-4b8a-88d7-93d855462f90",
                            ConcurrencyStamp = "003d7273-5aeb-45ae-9109-0f6722a8380c",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "21397611-90c1-4359-94d0-0800eb2a4f5b",
                            RoleId = "2c7a3320-0d7f-4b8a-88d7-93d855462f90"
                        },
                        new
                        {
                            UserId = "25caed64-ae6c-4069-bb72-554ad038498e",
                            RoleId = "2c7a3320-0d7f-4b8a-88d7-93d855462f90"
                        },
                        new
                        {
                            UserId = "c09e1e40-dc1f-45b7-8b52-b65145954d94",
                            RoleId = "2c7a3320-0d7f-4b8a-88d7-93d855462f90"
                        },
                        new
                        {
                            UserId = "9efc17fe-738a-4b4c-bdb6-002d17605b7c",
                            RoleId = "2c7a3320-0d7f-4b8a-88d7-93d855462f90"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Challenge.Infrastructure.Entities.ChallengeUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Challenge.Infrastructure.Entities.ChallengeUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Challenge.Infrastructure.Entities.ChallengeUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Challenge.Infrastructure.Entities.ChallengeUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
